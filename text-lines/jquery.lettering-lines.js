// Generated by CoffeeScript 1.6.3
(function($) {
  var injector, methods;
  injector = function(t, splitter, klass, after) {
    var a, inject;
    a = t.text().split(splitter);
    inject = "";
    if (a.length) {
      $(a).each(function(i, item) {
        return inject += "<span class=\"" + klass + (i + 1) + "\">" + item + "</span>" + after;
      });
      return t.empty().append(inject);
    }
  };
  methods = {
    init: function() {
      return this.each(function() {
        return injector($(this), "", "char", "");
      });
    },
    words: function() {
      return this.each(function() {
        return injector($(this), " ", "word", " ");
      });
    },
    lines: function() {
      return this.each(function() {
        var r;
        r = "eefec303079ad17405c889e092e105b0";
        return injector($(this).children("br").replaceWith(r).end(), r, "line", "");
      });
    },
    textLines: function() {
      return this.each(function() {
        var collection, first, j, last, lastY, line, lines, words, _i, _len;
        injector($(this), " ", "word", " ");
        words = $(this).find("span[class^='word']");
        collection = [];
        lines = [];
        lastY = 0;
        words.each(function(i) {
          var y;
          y = $(this).offset().top;
          if (y === lastY || i === 0) {
            collection.push(i);
          } else {
            lines.push(collection);
            collection = [];
          }
          return lastY = y;
        });
        for (j = _i = 0, _len = lines.length; _i < _len; j = ++_i) {
          line = lines[j];
          first = line.shift();
          last = line.pop();
          words.slice((first === 0 ? 0 : first - 1), last + 1).wrapAll("<span class='text-line" + j + "'>");
        }
        return words.each(function(i) {
          return $(this).after(" ");
        });
      });
    },
    unletter: function(method) {}
  };
  return $.fn.lettering = function(method) {
    if (method && methods[method]) {
      return methods[method].apply(this, [].slice.call(arguments, 1));
    } else if (method === "letters" || !method) {
      return methods.init.apply(this, [].slice.call(arguments, 0));
    }
    $.error("Method " + method + " does not exist on jQuery.lettering");
    return this;
  };
})(jQuery);
